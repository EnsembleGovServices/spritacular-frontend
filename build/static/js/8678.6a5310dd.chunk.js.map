{"version":3,"file":"static/js/8678.6a5310dd.chunk.js","mappings":"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","sources":["components/Quiz/QuizProgressBar.jsx","components/Quiz/QuizCard.jsx","pages/Quiz/QuizHome.jsx"],"sourcesContent":["import {Progress} from \"reactstrap\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\n\r\nconst QuizProgressBar = (props) => {\r\n    const {quizControl, activeQuestion} = props;\r\n    const [progress, setProgress] = useState();\r\n    const progressTotal = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let percentage = quizControl?.active ? quizControl?.active * 100 / quizControl?.total : 6.67;\r\n        setProgress(percentage);\r\n    }, [quizControl?.active, activeQuestion])\r\n\r\n\r\n    useEffect(() => {\r\n        if (progress > 51) {\r\n            progressTotal.current.classList.add('text-white')\r\n        } else {\r\n            progressTotal.current.classList.remove('text-white')\r\n        }\r\n    }, [progress])\r\n\r\n    return (\r\n        <div className=\"quiz-progress\">\r\n            <div className=\"total\" ref={progressTotal}>\r\n                {quizControl?.active} / {quizControl?.total}\r\n            </div>\r\n            <Progress\r\n                animated\r\n                value={progress}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizProgressBar;","import {Col, Row} from \"reactstrap\";\r\nimport Loader from \"../Shared/Loader\";\r\nimport QuizProgressBar from \"./QuizProgressBar\";\r\nimport {Icon} from '@iconify/react';\r\n\r\nconst QuizCard = (props) => {\r\n    const {\r\n        options,\r\n        quizControl,\r\n        handleNextPrev,\r\n        activeQuestion,\r\n        handleTleCheck,\r\n        handleQuizSubmit,\r\n        disable,\r\n        loading,\r\n        answers,\r\n        goFullScreenImage,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                {loading &&\r\n                    <Loader loaderClass=\"quiz-loading\"/>\r\n                }\r\n                <div className=\"card-top-image\">\r\n                    <div className=\"h-100 position-relative\">\r\n                        <img src={activeQuestion?.image_url} alt={activeQuestion?.id}/>\r\n                        <div className=\"full-screen\" onClick={() => goFullScreenImage(activeQuestion?.image_url)}>\r\n                            <div className=\"fc-icon\">\r\n                                <Icon icon=\"octicon:screen-full-16\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <QuizProgressBar quizControl={quizControl} activeQuestion={activeQuestion?.id}/>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title mb-4\">\r\n                        Choose the correct Transient Luminous Event (TLE) type of this image\r\n                    </h5>\r\n                    <div className=\"mcq-main\">\r\n                        <Row>\r\n                            {options?.map((item, index) => {\r\n                                return <Col md={6} key={item.id + index}>\r\n                                    <div className=\"checkbox-group\">\r\n                                        <input\r\n                                            id={item.id}\r\n                                            name=\"tle_type\"\r\n                                            type=\"checkbox\"\r\n                                            value={item.id}\r\n                                            checked={(answers?.find(list => list === item?.id) === item?.id)}\r\n                                            onChange={() => handleTleCheck(item.id)}\r\n                                        />\r\n                                        <label htmlFor={item.id}>{item?.title}</label>\r\n                                    </div>\r\n                                </Col>\r\n                            })}\r\n                            <Col sm={12} className=\"mt-5\">\r\n                                <div className=\"d-flex align-items-center justify-content-between\">\r\n                                    <button type=\"button\" value=\"prev\"\r\n                                            disabled={disable?.prevBtn}\r\n                                            onClick={(e) => handleNextPrev(e.target.value)}\r\n                                            className=\"btn px-5 btn-outline-dark\">Prev\r\n                                    </button>\r\n\r\n                                    {quizControl?.activeIndex === 14 ? (\r\n                                        <button type=\"submit\"\r\n                                                onClick={handleQuizSubmit}\r\n                                                disabled={disable?.nextBtn}\r\n                                                className=\"btn px-5 btn-primary\">Submit\r\n                                        </button>\r\n                                    ) : (\r\n                                        <button type=\"button\"\r\n                                                value=\"next\"\r\n                                                disabled={disable?.nextBtn}\r\n                                                onClick={(e) => handleNextPrev(e.target.value)}\r\n                                                className=\"btn px-5 btn-primary\">Next\r\n                                        </button>\r\n                                    )}\r\n\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizCard;","import \"../../assets/scss/component/quiz.scss\";\r\nimport {Col, Container, Modal, ModalBody, Row, UncontrolledAlert} from \"reactstrap\";\r\nimport {Icon} from '@iconify/react';\r\nimport axios from \"../../api/axios\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {baseURL, cdn} from \"../../helpers/url\";\r\nimport useAuth from \"../../hooks/useAuth\";\r\nimport BlurImage from \"../../components/Common/BlurImage\";\r\nimport QuizCard from \"../../components/Quiz/QuizCard\";\r\n\r\nconst QuizHome = (props) => {\r\n    const {roles} = props;\r\n    const {auth} = useAuth();\r\n    const [questions, setQuestions] = useState([]);\r\n    const [options, setOptions] = useState([]);\r\n    const [activeQuestion, setActiveQuestion] = useState({});\r\n    const [quizControl, setQuizControl] = useState({active: 1, activeIndex: 0});\r\n    const [buttonType, setButtonType] = useState();\r\n    const [singleAnswer, setSingleAnswer] = useState({que: null, ans: []});\r\n    const [answers, setAnswers] = useState([]);\r\n    const [result, setResult] = useState({\r\n        success: null,\r\n        error: null\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [disable, setDisable] = useState({\r\n        prevBtn: true,\r\n        nextBtn: true\r\n    });\r\n    const [fullScreen, setFullScreen] = useState(false);\r\n    const [fullImage, setFullImage] = useState(\"\");\r\n    const score = result?.success?.score;\r\n\r\n// Local Variables\r\n\r\n\r\n    const getQuizQuestions = () => {\r\n        return axios.get(baseURL.quiz_question, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${auth?.token?.access}`,\r\n            },\r\n        }).then((response) => {\r\n            setOptions(response?.data?.option_list)\r\n            setQuestions(response?.data?.question_list)\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    const handleNextPrev = (value) => {\r\n        window.scrollTo(0, 0);\r\n        setButtonType(value);\r\n        setQuizControl((prev) => {\r\n            return {\r\n                ...prev,\r\n                active: value === \"next\" ? (quizControl.active < quizControl?.total ? quizControl.active + 1 : quizControl.active) : (quizControl.active > 1 ? quizControl.active - 1 : quizControl.active)\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleTleCheck = (id) => {\r\n\r\n        if (singleAnswer?.ans.includes(id)) {\r\n            const filterValue = singleAnswer?.ans?.filter((item) => item !== id)\r\n            setSingleAnswer((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    ans: filterValue,\r\n                }\r\n            })\r\n        } else {\r\n            let optionSelected = [...singleAnswer?.ans, id];\r\n            setSingleAnswer((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    que: activeQuestion?.id,\r\n                    ans: optionSelected,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // submit final answers\r\n    const submitFinalAnswers = (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        axios.post(baseURL.quiz_submit, answers, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${auth?.token?.access}`,\r\n            },\r\n        }).then(response => {\r\n            setResult({\r\n                error: {},\r\n                success: {\r\n                    message: response?.data?.success,\r\n                    score: response?.data?.score,\r\n                    correct: response?.data?.correct_answers\r\n                }\r\n            });\r\n            setLoading(false);\r\n            setAnswers([]);\r\n            window.scrollTo(0, 0);\r\n        }).catch(error => {\r\n            setResult({\r\n                success: {},\r\n                error: {\r\n                    message: error?.response?.data?.details,\r\n                    status: error?.response?.statusText\r\n                }\r\n            });\r\n            setLoading(false);\r\n            window.scrollTo(0, 0);\r\n        })\r\n    }\r\n\r\n\r\n    // Handle Full Screen\r\n    const goFullScreenImage = (image) => {\r\n        // console.log(image);\r\n        setFullImage(image);\r\n        setFullScreen(true);\r\n    }\r\n\r\n    const closeFullScreen = () => {\r\n        setFullScreen(false);\r\n        setFullImage(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        setQuizControl((prev) => {\r\n            return {\r\n                ...prev,\r\n                activeIndex: quizControl?.active - 1\r\n            }\r\n        })\r\n    }, [quizControl?.active])\r\n\r\n    useEffect(() => {\r\n        getQuizQuestions().then(r => r);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setActiveQuestion(questions?.[quizControl.active - 1]);\r\n        setQuizControl((prev) => {\r\n            return {\r\n                ...prev,\r\n                total: questions?.length\r\n            }\r\n        })\r\n    }, [questions]);\r\n\r\n    useEffect(() => {\r\n        let activeQuest = questions?.filter((item, index) => {\r\n            if (index === quizControl?.active - 1) {\r\n                return item;\r\n            }\r\n        }).map((item, index) => {\r\n            return item;\r\n        });\r\n        setActiveQuestion(activeQuest[0]);\r\n    }, [quizControl?.active])\r\n\r\n    useEffect(() => {\r\n        setSingleAnswer({\r\n            que: activeQuestion?.id,\r\n            ans: answers[quizControl.activeIndex]?.ans ? answers[quizControl.activeIndex]?.ans : []\r\n        });\r\n    }, [activeQuestion?.id])\r\n\r\n    useEffect(() => {\r\n        let single = {...singleAnswer};\r\n\r\n        if (activeQuestion?.id) {\r\n            answers[quizControl.activeIndex] = single;\r\n        }\r\n\r\n    }, [singleAnswer.ans])\r\n\r\n    useEffect(() => {\r\n        let current = answers?.[quizControl?.activeIndex]?.ans?.length > 0;\r\n        if (current && singleAnswer?.ans?.length > 0) {\r\n            setDisable({\r\n                ...disable,\r\n                nextBtn: false,\r\n                prevBtn: (quizControl?.activeIndex === 0 || singleAnswer?.ans?.length < 1)\r\n            });\r\n        } else {\r\n            setDisable({\r\n                ...disable,\r\n                nextBtn: true,\r\n                prevBtn: quizControl?.activeIndex === 0\r\n            });\r\n        }\r\n\r\n\r\n    }, [answers?.[quizControl?.activeIndex]?.ans, singleAnswer?.ans]);\r\n\r\n    return (\r\n        <>\r\n            <section className=\"quiz-main\">\r\n                <Container>\r\n                    <form onSubmit={submitFinalAnswers}>\r\n                        <Row className=\"align-items-center\">\r\n                            <Col sm={12}>\r\n                                {result?.error?.message &&\r\n                                    <div className=\"error-card\">\r\n                                        <UncontrolledAlert color=\"danger\" data-dismiss=\"alert\" dismissible=\"true\">\r\n                                            {result?.error?.message}\r\n                                        </UncontrolledAlert>\r\n                                    </div>\r\n                                }\r\n                            </Col>\r\n                            <Col sm={12}>\r\n                                {!result?.success ? (\r\n                                    <QuizCard singleAnswer={singleAnswer}\r\n                                              activeQuestion={activeQuestion}\r\n                                              options={options}\r\n                                              loading={loading}\r\n                                              answers={answers?.[quizControl?.activeIndex]?.ans}\r\n                                              quizControl={quizControl}\r\n                                              disable={disable}\r\n                                              handleNextPrev={handleNextPrev}\r\n                                              handleTleCheck={handleTleCheck}\r\n                                              handleSubmit={submitFinalAnswers}\r\n                                              goFullScreenImage={goFullScreenImage}\r\n                                    />\r\n                                ) : (\r\n                                    <>\r\n                                        <div className=\"card quiz-submitted\">\r\n                                            <div className=\"card-body\">\r\n                                                <div className=\"result-image\">\r\n                                                    {score < 75 ? (\r\n                                                        <img className=\"img-fluid success-img\"\r\n                                                             src={`${cdn.url}/failed.svg`}\r\n                                                             alt=\"success\"/>\r\n                                                    ) : (\r\n                                                        <img className=\"img-fluid success-img\"\r\n                                                             src={`${cdn.url}/success.svg`}\r\n                                                             alt=\"success\"/>\r\n                                                    )}\r\n                                                </div>\r\n                                                <h6 className=\"title\">{result?.success?.message}</h6>\r\n                                                <div className=\"d-flex align-items-center justify-content-center\">\r\n                                                    <div\r\n                                                        className={score > 75 ? 'score pass fw-bolder' : 'score fail fw-bolder'}>\r\n                                                        <span>{result?.success?.correct}</span>\r\n                                                        <span className=\"score-text\">Correct Answer</span>\r\n                                                    </div>\r\n                                                    <div\r\n                                                        className={score > 75 ? 'score pass fw-bolder' : 'score fail fw-bolder'}>\r\n                                                        <span className=\"d-block\">{score?.toFixed(0)}%</span>\r\n                                                        <span className=\"score-text\">Total Score</span>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                {score < 75 ? (\r\n                                                    <button type=\"button\"\r\n                                                            onClick={() => window.location.reload(false)}\r\n                                                            className=\"px-4 py-2 mb-4 fw-bolder btn btn-primary\">Re-attempt\r\n                                                        Quiz\r\n                                                    </button>\r\n                                                ) : (\r\n                                                    <div className=\"px-4 py-2 mb-4 fw-bolder\">\r\n                                                        <h5 className=\"mb-0\">\r\n                                                            <span\r\n                                                                className=\"text-success\">Congratulations! </span>\r\n                                                            <span>Your account has been upgraded.</span>\r\n                                                        </h5>\r\n                                                    </div>\r\n                                                )}\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                )}\r\n                            </Col>\r\n                        </Row>\r\n                    </form>\r\n                </Container>\r\n            </section>\r\n\r\n            {fullScreen &&\r\n                <Modal\r\n                    className=\"fullScreen-quiz-image-modal\"\r\n                    isOpen={fullScreen}\r\n                    backdrop={false}\r\n                    centered\r\n                    fullscreen\r\n                    toggle={closeFullScreen}\r\n                >\r\n                    <ModalBody>\r\n                        <button className=\"close-icon\" type=\"button\" onClick={() => closeFullScreen()}>\r\n                            <Icon color=\"#fff\" width={30} height={30} icon=\"clarity:close-line\"/>\r\n                        </button>\r\n                        <BlurImage preview={fullImage} image={fullImage}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuizHome;\r\n"],"names":["props","quizControl","activeQuestion","useState","progress","setProgress","progressTotal","useRef","useEffect","percentage","active","total","current","classList","add","remove","className","ref","animated","value","options","handleNextPrev","handleTleCheck","handleQuizSubmit","disable","loading","answers","goFullScreenImage","Loader","loaderClass","src","image_url","alt","id","onClick","icon","map","item","index","md","name","type","checked","find","list","onChange","htmlFor","title","sm","disabled","prevBtn","e","target","activeIndex","nextBtn","roles","auth","useAuth","questions","setQuestions","setOptions","setActiveQuestion","setQuizControl","setButtonType","que","ans","singleAnswer","setSingleAnswer","setAnswers","success","error","result","setResult","setLoading","setDisable","fullScreen","setFullScreen","fullImage","setFullImage","score","submitFinalAnswers","preventDefault","axios","baseURL","headers","Authorization","token","access","then","response","message","data","correct","correct_answers","window","scrollTo","catch","details","status","statusText","closeFullScreen","prev","option_list","question_list","console","log","getQuizQuestions","r","length","activeQuest","filter","single","onSubmit","color","dismissible","cdn","toFixed","location","reload","includes","filterValue","optionSelected","handleSubmit","image","isOpen","backdrop","centered","fullscreen","toggle","width","height","BlurImage","preview"],"sourceRoot":""}