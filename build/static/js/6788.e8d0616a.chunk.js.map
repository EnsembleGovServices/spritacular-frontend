{"version":3,"file":"static/js/6788.e8d0616a.chunk.js","mappings":"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","sources":["components/Shared/FilterSelectMenu.jsx"],"sourcesContent":["import \"../../assets/scss/component/myObservation.scss\";\r\nimport axiosPrivate from \"../../api/axios\";\r\nimport moment from \"moment/moment\";\r\nimport useAuth from \"../../hooks/useAuth\";\r\nimport {observationStatus, countries} from \"../../helpers/timezone\";\r\nimport useObservationsData from \"../../hooks/useObservationsData\";\r\nimport {\r\n    Button,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle\r\n} from \"reactstrap\";\r\nimport {Icon} from \"@iconify/react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Images from './../../static/images';\r\nimport {baseURL, routeUrls} from \"../../helpers/url\";\r\n\r\nconst FilterSelectMenu = (props) => {\r\n    const {\r\n        filterShow,\r\n        handleFilterOpen,\r\n        galleryFilter,\r\n        isFilterOpen,\r\n        setIsFilterOpen,\r\n        selectedFilterHorizontal,\r\n        setSelectedFilterHorizontal,\r\n        searchCountry,\r\n        findCountry,\r\n        handleFilterValue,\r\n        dashboardFilter,\r\n        handleListView,\r\n        handleGridView,\r\n        listView,\r\n        gridView\r\n    } = props;\r\n    const {auth} = useAuth();\r\n    const {observationCSVId, setObservationCSVId} = useObservationsData();\r\n    const CSVID = observationCSVId?.data?.observation;\r\n\r\n    const handleCSVDownload = (id) => {\r\n        downloadSelectedDataAsCSV(id);\r\n    }\r\n    const downloadSelectedDataAsCSV = (data) => {\r\n        let name = moment.now();\r\n        let downloadUrl = baseURL.api + '/observation/get_observation_csv/';\r\n        axiosPrivate.post(downloadUrl, {\r\n            observation_ids: data\r\n        }, {\r\n            responseType: 'blob',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `Bearer ${auth?.token?.access}`,\r\n            },\r\n        }).then(response => {\r\n            setObservationCSVId((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    error: {\r\n                        status: '',\r\n                        message: '',\r\n                        data: ''\r\n                    }\r\n                }\r\n            })\r\n            const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));\r\n            const link = document.createElement('a');\r\n            link.href = downloadUrl;\r\n            link.setAttribute('download', `${name}.csv`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            link.remove();\r\n        }).catch(error => {\r\n            setObservationCSVId((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    error: {\r\n                        status: error.response.status,\r\n                        message: error.response.statusText,\r\n                        data: error.response.data\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"observation-filter_wrapper\">\r\n                <Container>\r\n                    <div className={`d-flex ${auth?.user?.is_user ? 'py-3' : ''}`}>\r\n                        <div>\r\n                            {dashboardFilter && <FormGroup\r\n                                className={`filter-btn m-0 d-flex align-items-center h-100 form-group p-0 ${filterShow ? 'filter-open' : ''}`}>\r\n                                <Button onClick={() => handleFilterOpen()}\r\n                                        className=\"border-0 rounded-0 bg-transparent text-black shadow-none text-start w-auto w-md-100 d-flex align-items-center\">\r\n                                    <img src={Images.Filter} alt=\"Filter\"/> {filterShow &&\r\n                                    <span className=\"ms-0 ms-md-3\">Advanced Filter</span>}\r\n                                </Button>\r\n                            </FormGroup>}\r\n\r\n                        </div>\r\n                        {\r\n                            auth?.user &&\r\n\r\n                            <div className='flex-fill'>\r\n                                <Row>\r\n                                    <Col sm={12} lg={8} className='order-2 order-lg-1'>\r\n                                        {galleryFilter && !auth?.user?.is_user &&\r\n                                            <FormGroup className=\"m-0 d-inline-block form-group country-menu\">\r\n                                                <Label className=\"text-uppercase px-2 px-xl-3\"\r\n                                                       htmlFor=\"Country\">Country</Label>\r\n                                                <Dropdown className=\"dropdown-with-search\"\r\n                                                          toggle={() => setIsFilterOpen({\r\n                                                              ...isFilterOpen,\r\n                                                              isCountryOpen: !isFilterOpen.isCountryOpen\r\n                                                          })} isOpen={isFilterOpen.isCountryOpen}>\r\n                                                    <DropdownToggle\r\n                                                        className=\"px-2 px-xl-3 shadow-none border-0 text-black fw-normal text-start d-flex justify-content-between align-items-center w-100\">\r\n                                                        <span\r\n                                                            className=\"text-truncate\">{(selectedFilterHorizontal.country?.name !== '' ? selectedFilterHorizontal.country?.name : 'All countries')}</span>\r\n\r\n                                                        <Icon icon=\"fe:arrow-down\" className=\"down-arrow ms-1\"/>\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu className=\"py-0 shadow\">\r\n                                                        <DropdownItem header\r\n                                                                      className=\"mb-0 position-sticky start-0 top-0 end-0 p-2 bg-white\"><Input\r\n                                                            type=\"text\" className=\"p-2\" placeholder=\"Search Country\"\r\n                                                            onChange={(e) => findCountry(e)}/></DropdownItem>\r\n                                                        {countries?.filter(item => {\r\n                                                            return item.name.toLowerCase().indexOf(searchCountry.toLowerCase()) !== -1;\r\n                                                        }).map((item, index) => {\r\n                                                            return <DropdownItem name=\"timezone\"\r\n                                                                                 className=\"px-2 fw-normal\" key={index}\r\n                                                                                 value={item.name} onClick={(e) => {\r\n                                                                setSelectedFilterHorizontal({\r\n                                                                    ...selectedFilterHorizontal,\r\n                                                                    country: item\r\n                                                                });\r\n                                                                handleFilterValue(item, 'country');\r\n                                                            }}>{item.name}</DropdownItem>\r\n                                                        })}\r\n                                                    </DropdownMenu>\r\n                                                </Dropdown>\r\n                                            </FormGroup>}\r\n                                        {galleryFilter && !auth?.user?.is_user &&\r\n                                            <FormGroup className=\"m-0 d-inline-block form-group type-menu\">\r\n                                                <Label className=\"text-uppercase px-2 px-xl-3\"\r\n                                                       htmlFor=\"TransientLuminousEvent\">Transient Luminous Event</Label>\r\n                                                <Dropdown className=\"dropdown-with-search\"\r\n                                                          toggle={() => setIsFilterOpen({\r\n                                                              ...isFilterOpen,\r\n                                                              isTypeOpen: !isFilterOpen.isTypeOpen\r\n                                                          })} isOpen={isFilterOpen.isTypeOpen}>\r\n                                                    <DropdownToggle\r\n                                                        className=\"px-2 px-xl-3 shadow-none border-0 text-black fw-normal text-start d-flex justify-content-between align-items-center w-100\">\r\n                                                        <span\r\n                                                            className=\"text-truncate\">{(selectedFilterHorizontal.type) ? selectedFilterHorizontal.type : 'All types'}</span>\r\n                                                        <Icon icon=\"fe:arrow-down\" className=\"down-arrow ms-1\"/>\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu className=\"py-0 shadow\">\r\n                                                        {auth.categoryList !== undefined && auth?.categoryList?.map((item, index) => {\r\n                                                            return <DropdownItem name=\"timezone\"\r\n                                                                                 className=\"px-2 fw-normal\" key={index}\r\n                                                                                 value={item.name} onClick={(e) => {\r\n                                                                setSelectedFilterHorizontal({\r\n                                                                    ...selectedFilterHorizontal,\r\n                                                                    type: e.target.value\r\n                                                                });\r\n                                                                handleFilterValue(e.target.value, 'category');\r\n                                                            }}>{item.name}</DropdownItem>\r\n                                                        })}\r\n                                                    </DropdownMenu>\r\n                                                </Dropdown>\r\n                                            </FormGroup>}\r\n                                        {galleryFilter && !auth?.user?.is_user &&\r\n                                            <FormGroup className=\"m-0 d-inline-block form-group status-menu\">\r\n                                                <Label className=\"text-uppercase px-2 px-xl-3\"\r\n                                                       htmlFor=\"ObservationStatus\">Observation Status</Label>\r\n                                                <Dropdown className=\"dropdown-with-search\"\r\n                                                          toggle={() => setIsFilterOpen({\r\n                                                              ...isFilterOpen,\r\n                                                              isStatusOpen: !isFilterOpen.isStatusOpen\r\n                                                          })} isOpen={isFilterOpen.isStatusOpen}>\r\n                                                    <DropdownToggle\r\n                                                        className=\"px-2 px-xl-3 shadow-none border-0 text-black fw-normal text-start d-flex justify-content-between align-items-center w-100\">\r\n                                                        <span\r\n                                                            className=\"text-truncate\">{(selectedFilterHorizontal.status) ? selectedFilterHorizontal.status.charAt(0).toUpperCase() + selectedFilterHorizontal.status.slice(1) : 'All status'}</span>\r\n                                                        <Icon icon=\"fe:arrow-down\" className=\"down-arrow ms-1\"/>\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu className=\"py-0 shadow\">\r\n\r\n                                                        {observationStatus?.map((item, index) => {\r\n                                                            return <DropdownItem name=\"timezone\"\r\n                                                                                 className=\"px-2 fw-normal\" key={index}\r\n                                                                                 value={item} onClick={(e) => {\r\n                                                                setSelectedFilterHorizontal({\r\n                                                                    ...selectedFilterHorizontal,\r\n                                                                    status: e.target.value.toLowerCase()\r\n                                                                });\r\n                                                                handleFilterValue(e.target.value, 'status');\r\n                                                            }}>{item}</DropdownItem>\r\n                                                        })}\r\n                                                    </DropdownMenu>\r\n                                                </Dropdown>\r\n                                            </FormGroup>}\r\n                                    </Col>\r\n                                    <Col sm={12} lg={4} className=\"text-end order-1 order-lg-2 my-2 my-lg-0\">\r\n                                        <div className=\"d-flex align-items-center justify-content-end h-100 \">\r\n                                            {dashboardFilter &&\r\n                                                <>\r\n                                                    <div className=\"view-switch-wrap\">\r\n                                                        <Button onClick={() => handleGridView()}\r\n                                                                className=\"bg-transparent rounded-0 border-0 p-0 shadow-none\"><Icon\r\n                                                            icon=\"mdi:view-grid-outline\"\r\n                                                            color={gridView ? '#900' : '#000'}/></Button>\r\n                                                        <Button onClick={() => handleListView()}\r\n                                                                className=\"bg-transparent rounded-0 border-0 p-0 shadow-none ms-2 ms-xl-3 \"><Icon\r\n                                                            icon=\"ic:sharp-list\"\r\n                                                            color={listView ? '#900' : '#000'}/></Button>\r\n                                                    </div>\r\n                                                    <div className=\"border-start ps-2 ms-2 ps-xl-3 ms-xl-3\">\r\n                                                        <button\r\n                                                            className={`btn btn-secondary shadow-none ${CSVID?.length <= 0 || CSVID === undefined || gridView ? 'disabled' : ''}`}\r\n                                                            disabled={CSVID?.length <= 0 || CSVID === undefined || gridView}\r\n                                                            onClick={() => handleCSVDownload(CSVID)}\r\n                                                        >\r\n                                                            <Icon icon=\"heroicons-outline:download\" width=\"25\"\r\n                                                                  height=\"22\"/>\r\n                                                            Download CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </>\r\n                                            }\r\n                                            {!dashboardFilter && <Link to={'/' + routeUrls.observationsAdd}\r\n                                                                       className=\"btn btn-secondary shadow-none mt-2 mt-md-0\">\r\n                                                <Icon icon=\"heroicons-outline:upload\" width=\"16\" height=\"20\"/> Upload\r\n                                                Observation\r\n                                            </Link>}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default FilterSelectMenu;"],"names":["props","filterShow","handleFilterOpen","galleryFilter","isFilterOpen","setIsFilterOpen","selectedFilterHorizontal","setSelectedFilterHorizontal","searchCountry","findCountry","handleFilterValue","dashboardFilter","handleListView","handleGridView","listView","gridView","auth","useAuth","useObservationsData","observationCSVId","setObservationCSVId","CSVID","data","observation","downloadSelectedDataAsCSV","name","moment","downloadUrl","baseURL","axiosPrivate","observation_ids","responseType","headers","token","access","then","response","prev","error","status","message","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","catch","statusText","className","user","is_user","onClick","src","Images","alt","sm","lg","htmlFor","toggle","isCountryOpen","isOpen","country","icon","header","type","placeholder","onChange","e","countries","item","toLowerCase","indexOf","map","index","value","isTypeOpen","undefined","categoryList","target","isStatusOpen","charAt","toUpperCase","slice","observationStatus","color","length","disabled","width","height","to","routeUrls"],"sourceRoot":""}