{"version":3,"file":"static/js/5019.c5b42124.chunk.js","mappings":"0SAsJA,EA9I4B,SAACA,GACzB,IAAOC,EAAiDD,EAAjDC,QAAwCC,GAASF,EAAxCG,eAAwCH,EAAxBI,MAAwBJ,EAAjBK,OAAiBL,EAATE,OAC/C,GAAwBI,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,YAA9B,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAA0CN,EAAAA,EAAAA,WAAS,GAAnD,eAAsBO,GAAtB,YAoCAC,EAAAA,EAAAA,kBAAgB,WACRP,IAASI,GAzBI,WACjB,IAAMI,EAAS,IAAIC,WACnBD,EAAOE,UAAY,WACf,IAAMC,EAAeH,EAAOI,OAAOC,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAClEC,EAAS,gCAA4BH,GAC3CR,EAAWW,IAEfN,EAAOO,cAAcf,GAmBjBgB,KAEL,CAAChB,EAAME,KAEVe,EAAAA,EAAAA,YAAU,WACDb,GACDV,GAAQ,SAACwB,GACL,OAAO,kBACAA,GADP,IAEIC,gBAAiBnB,SAI9B,CAACA,IAeJ,IAGMoB,EAAW,SAACpB,GAAD,OACb,IAAIqB,SAAQ,SAACC,EAASC,GAClB,IAAMf,EAAS,IAAIC,WACnBD,EAAOO,cAAcf,GACrBQ,EAAOgB,OAAS,kBAAMF,EAAQd,EAAOI,SACrCJ,EAAOiB,QAAU,SAAC5B,GAAD,OAAW0B,EAAO1B,QAoC3C,OAjCAoB,EAAAA,EAAAA,YAAU,WACN,GAAItB,EACA,OAAO+B,MAAM/B,GACRgC,KADE,yCACG,WAAOC,GAAP,2FACIC,EAAcD,EAASE,QAAQC,IAAI,gBADvC,SAEiBH,EACdI,OACAC,OAAM,SAACpC,GAAD,OAAWqC,QAAQC,IAAI,aAActC,MAJ9C,cAEImC,EAFJ,OAKEI,EAAuBzC,EAlB5B0C,MAAM,QAAQ,GAAGA,MAAM,KAAKC,MAAMC,OAmB3BvC,EAAO,IAAIwC,KAAK,CAACR,GAAOI,EAAU,CAACP,YAAAA,IANvC,SAOkBT,EAASpB,GAAMiC,OAAM,SAACpC,GAAD,OACrCqC,QAAQC,IAAI,eAAgBtC,MAR9B,cAOI4C,EAPJ,OAUFC,YAAW,WACPhD,GAAQ,SAACwB,GACL,OAAO,kBACAA,GADP,IAEIC,gBAAiBnB,OAGzBC,EAAQD,GACRG,EAAWsC,KACZ,KAnBD,kBAoBKzC,GApBL,4CADH,uDAuBFiC,OAAM,SAACpC,GAAD,OACHqC,QAAQC,IAAR,gCAKb,CAACxC,KAGA,UAAC,KAAD,YACI,SAAC,KAAD,CAAOgD,IAAI,QAAX,+BAGA,iBAAKC,UAAU,oCAAf,WACI,SAACC,EAAA,EAAD,CAAeC,YAAY,EAAMC,kBA7GrB,SAACC,GACrB3C,GAAS,GACTF,EAAW,MACXF,EAAQ+C,EAAEC,OAAOC,MAAM,OA2GdhD,IACG,iBAAK0C,UAAW,oEAAhB,WACI,mBAAQA,UAAU,aAAaO,QAAS,SAACH,GAAD,OAjGrB,SAACA,GACpC3C,GAAS,GACT2C,EAAEI,iBACFjD,EAAW,MACXF,EAAQ,MACRP,GAAQ,SAACwB,GACL,OAAO,kBACAA,GADP,IAEIC,gBAAiB,UAyFsCkC,CAA+BL,IAA9E,UACI,SAAC,KAAD,CAAMM,KAAK,4BAA4BC,MAAO,GAAIC,OAAQ,QAE9D,gBAAKZ,UAAW,sBAAhB,UACI,SAACa,EAAA,QAAD,CAAWC,cAxHP,SAACC,GACzBrD,EAAiBqD,IAuHkDlB,MAAOvC,EAASA,QAASA,iB,mEClEpG,IAlEsB,SAACT,GACnB,IACImE,EASAnE,EATAmE,SACAC,EAQApE,EARAoE,YACAC,EAOArE,EAPAqE,SACAf,EAMAtD,EANAsD,kBACAlD,EAKAJ,EALAI,MACAkE,EAIAtE,EAJAsE,MACAC,EAGAvE,EAHAuE,aACAC,EAEAxE,EAFAwE,iBACAnB,EACArD,EADAqD,WAEJ,OACI,iBAAKF,UAAU,oBAAf,WACI,iBACIA,UAAS,+BAA0BmB,EAAQ,wBAA0B,GAA5D,YAAkEjB,EAAa,kBAAoB,IADhH,WAEI,gBAAKF,UAAU,kBAAf,UACI,UAAC,KAAD,YACI,SAAC,KAAD,CAAOsB,QAAQ,aAAf,UACI,iBAAKtB,UAAU,cAAf,WACI,SAAC,KAAD,CAAMU,KAAK,eAAea,MAAM,UAAUZ,MAAM,KAAKC,OAAO,QAC5D,uBAAIS,EAAmB,gCAAkC,4CACxDL,IAAY,iBAAMhB,UAAU,aAAhB,kCACZiB,IACG,yBACI,iFAShB,SAAC,KAAD,CACIO,KAAK,OACLC,KAAK,OACLC,GAAG,aACHC,OAAO,mCACPT,SAAUA,EACVU,SAAU,SAACxB,GAAD,OAAOD,EAAkBC,YAIzC,OAALnD,QAAK,IAALA,OAAA,EAAAA,EAAO4E,SACJ,kBAAM7B,UAAU,gDAAhB,iBAAiE/C,QAAjE,IAAiEA,OAAjE,EAAiEA,EAAO4E,MAAxE,QAEE,OAAL5E,QAAK,IAALA,OAAA,EAAAA,EAAO6E,QACJ,iBAAM9B,UAAU,gDAAhB,gBAAiE/C,QAAjE,IAAiEA,OAAjE,EAAiEA,EAAO6E,QAEtE,OAAL7E,QAAK,IAALA,OAAA,EAAAA,EAAO8E,aACJ,iBAAM/B,UAAU,8CAAhB,gBAA+D/C,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAO8E,eAG7EV,IACG,gBAAKrB,UAAS,UAAKqB,EAAmB,cAAgB,IAAtD,UACI,oBAAQd,QAAS,SAACH,GAAD,OAAOgB,EAAahB,IAC7BJ,UAAS,oBADjB,WAEI,SAAC,KAAD,CAAMU,KAAK,2BAA2BC,MAAM,KAAKC,OAAO,OAF5D,+B","sources":["components/Blog/UploadFeaturedImage.jsx","components/Shared/UploadImageUI.jsx"],"sourcesContent":["import \"../../assets/scss/component/initialUploadobservations.scss\";\nimport \"../../assets/scss/component/uploadFeatureBlog.scss\";\nimport UploadImageUI from \"../Shared/UploadImageUI\";\nimport {useEffect, useLayoutEffect, useState} from \"react\";\nimport {Icon} from '@iconify/react';\nimport BlurImage from \"../Common/BlurImage\";\nimport {FormGroup, Label} from \"reactstrap\";\n\nconst UploadFeaturedImage = (props) => {\n    const {setData, uploadProgress, error, update, thumb} = props;\n    const [file, setFile] = useState();\n    const [preview, setPreview] = useState();\n    const [reset, setReset] = useState(false);\n    const [loaderLoading, setLoaderLoading] = useState(true);\n\n    // const progressBar = useRef(null);\n    const handleLoaderLoading = (state) => {\n        setLoaderLoading(state);\n    };\n\n    const handleFileInput = (e) => {\n        setReset(false);\n        setPreview(null)\n        setFile(e.target.files[0]);\n    }\n    const previewImage = () => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            const base64String = reader.result.replace('data:', '').replace(/^.+,/, '');\n            const baseImage = `data:image/png;base64,${base64String}`;\n            setPreview(baseImage);\n        }\n        reader.readAsDataURL(file);\n    }\n\n    const removePreviewAndClearImageData = (e) => {\n        setReset(true);\n        e.preventDefault();\n        setPreview(null);\n        setFile(null);\n        setData((prev) => {\n            return {\n                ...prev,\n                thumbnail_image: null\n            }\n        })\n    }\n\n\n    useLayoutEffect(() => {\n        if (file && !reset) {\n            previewImage();\n        }\n    }, [file, preview])\n\n    useEffect(() => {\n        if (!reset) {\n            setData((prev) => {\n                return {\n                    ...prev,\n                    thumbnail_image: file\n                }\n            })\n        }\n    }, [file])\n\n\n    // useEffect(() => {\n    //     if (uploadProgress === \"100%\") {\n    //         progressBar.current.classList.add('fade-out');\n    //         setTimeout(function () {\n    //             progressBar.current.classList.add('fade-out');\n    //         }, 500);\n    //         setTimeout(function () {\n    //             progressBar.current.remove();\n    //         }, 1200);\n    //     }\n    // }, [uploadProgress])\n\n    const getFileName = (url) => {\n        return url.split(/[#?]/)[0].split(\"/\").pop().trim();\n    };\n    const toBase64 = (file) =>\n        new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = (error) => reject(error);\n        });\n\n    useEffect(() => {\n        if (thumb) {\n            return fetch(thumb)\n                .then(async (response) => {\n                    const contentType = response.headers.get(\"content-type\");\n                    const blob = await response\n                        .blob()\n                        .catch((error) => console.log(\"blob error\", error));\n                    let fileName = getFileName(thumb);\n                    const file = new File([blob], fileName, {contentType});\n                    const image = await toBase64(file).catch((error) =>\n                        console.log(\"base64 Error\", error)\n                    );\n                    setTimeout(() => {\n                        setData((prev) => {\n                            return {\n                                ...prev,\n                                thumbnail_image: file\n                            }\n                        })\n                        setFile(file)\n                        setPreview(image);\n                    }, 500)\n                    return file;\n                })\n                .catch((error) =>\n                    console.log(\n                        `File converting delayed`\n                    )\n                );\n        }\n    }, [thumb])\n\n    return (\n        <FormGroup>\n            <Label for=\"title\">\n                Upload Thumbnail\n            </Label>\n            <div className=\"position-relative overflow-hidden\">\n                <UploadImageUI blogUpload={true} handleUploadImage={handleFileInput}/>\n                {preview &&\n                    <div className={'img_wrapper position-absolute w-100 left-0 right-0 top-0 bottom-0'}>\n                        <button className=\"remove-btn\" onClick={(e) => removePreviewAndClearImageData(e)}>\n                            <Icon icon=\"clarity:window-close-line\" width={20} height={20}/>\n                        </button>\n                        <div className={'img-preview_wrapper'}>\n                            <BlurImage loaderLoading={handleLoaderLoading} image={preview} preview={preview}/>\n                        </div>\n                    </div>\n                }\n                {/*{uploadProgress > \"1%\" &&*/}\n                {/*    <div className=\"progressbar\" ref={progressBar} style={{width: uploadProgress}}>*/}\n                {/*        {`${uploadProgress}`}*/}\n                {/*    </div>*/}\n                {/*}*/}\n            </div>\n        </FormGroup>\n\n    )\n}\nexport default UploadFeaturedImage;","import \"../../assets/scss/component/initialUploadobservations.scss\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\nimport {Icon} from \"@iconify/react/dist/iconify\";\n\nconst UploadImageUI = (props) => {\n    const {\n        maxLimit,\n        imageFormat,\n        multiple,\n        handleUploadImage,\n        error,\n        small,\n        handleObvAdd,\n        defaultUploadBox,\n        blogUpload\n    } = props;\n    return (\n        <div className=\"position-relative\">\n            <div\n                className={`upload-image_wrapper ${small ? \"small-upload_box mb-5\" : ''} ${blogUpload ? 'blog-upload-box' : ''}`}>\n                <div className=\"upload-ob-inner\">\n                    <FormGroup>\n                        <Label htmlFor=\"UploadFile\">\n                            <div className=\"upload-info\">\n                                <Icon icon=\"bx:image-alt\" color=\"#737e96\" width=\"42\" height=\"42\"/>\n                                <p>{defaultUploadBox ? 'Upload your first observation' : 'Drag and drop images or click to upload'}</p>\n                                {maxLimit && <span className=\"text-black\">Max. Image Size: 5MB</span>}\n                                {imageFormat &&\n                                    <ul>\n                                        <li>\n                                            Common Image File Formats (JPEG or\n                                            JPG, PNG)\n                                        </li>\n                                    </ul>\n                                }\n\n                            </div>\n                        </Label>\n                        <Input\n                            type=\"file\"\n                            name=\"file\"\n                            id=\"UploadFile\"\n                            accept=\"image/jpg, image/jpeg, image/png\"\n                            multiple={multiple}\n                            onChange={(e) => handleUploadImage(e)}\n                        />\n                    </FormGroup>\n                </div>\n                {error?.count &&\n                    <span className=\"text-danger d-block small my-1 d-inline-block\">{error?.count} </span>\n                }\n                {error?.size &&\n                    <span className=\"text-danger d-block small my-1 d-inline-block\">{error?.size}</span>\n                }\n                {error?.duplicate &&\n                    <span className=\"text-info d-block small my-1 d-inline-block\">{error?.duplicate}</span>\n                }\n            </div>\n            {defaultUploadBox &&\n                <div className={`${defaultUploadBox ? 'mark-center' : ''}`}>\n                    <button onClick={(e) => handleObvAdd(e)}\n                            className={`btn btn-secondary`}>\n                        <Icon icon=\"heroicons-outline:upload\" width=\"25\" height=\"22\"/>\n                        Upload Observation\n                    </button>\n                </div>\n            }\n        </div>\n    )\n}\nexport default UploadImageUI;"],"names":["props","setData","thumb","uploadProgress","error","update","useState","file","setFile","preview","setPreview","reset","setReset","setLoaderLoading","useLayoutEffect","reader","FileReader","onloadend","base64String","result","replace","baseImage","readAsDataURL","previewImage","useEffect","prev","thumbnail_image","toBase64","Promise","resolve","reject","onload","onerror","fetch","then","response","contentType","headers","get","blob","catch","console","log","fileName","split","pop","trim","File","image","setTimeout","for","className","UploadImageUI","blogUpload","handleUploadImage","e","target","files","onClick","preventDefault","removePreviewAndClearImageData","icon","width","height","BlurImage","loaderLoading","state","maxLimit","imageFormat","multiple","small","handleObvAdd","defaultUploadBox","htmlFor","color","type","name","id","accept","onChange","count","size","duplicate"],"sourceRoot":""}