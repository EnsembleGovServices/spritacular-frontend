{"version":3,"file":"static/js/5019.4d9599cc.chunk.js","mappings":"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","sources":["components/Blog/UploadFeaturedImage.jsx","components/Common/BlurImage.jsx","components/Shared/UploadImageUI.jsx"],"sourcesContent":["import \"../../assets/scss/component/initialUploadobservations.scss\";\nimport \"../../assets/scss/component/uploadFeatureBlog.scss\";\nimport UploadImageUI from \"../Shared/UploadImageUI\";\nimport {useEffect, useLayoutEffect, useState} from \"react\";\nimport {Icon} from '@iconify/react';\nimport BlurImage from \"../Common/BlurImage\";\nimport {FormGroup, Label} from \"reactstrap\";\n\nconst UploadFeaturedImage = (props) => {\n    const {setData, uploadProgress, error, update, thumb} = props;\n    const [file, setFile] = useState();\n    const [preview, setPreview] = useState();\n    const [reset, setReset] = useState(false);\n    // const progressBar = useRef(null);\n\n    const handleFileInput = (e) => {\n        setReset(false);\n        setPreview(null)\n        setFile(e.target.files[0]);\n    }\n    const previewImage = () => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            const base64String = reader.result.replace('data:', '').replace(/^.+,/, '');\n            const baseImage = `data:image/png;base64,${base64String}`;\n            setPreview(baseImage);\n        }\n        reader.readAsDataURL(file);\n    }\n\n    const removePreviewAndClearImageData = (e) => {\n        setReset(true);\n        e.preventDefault();\n        setPreview(null);\n        setFile(null);\n        setData((prev) => {\n            return {\n                ...prev,\n                thumbnail_image: null\n            }\n        })\n    }\n\n    useLayoutEffect(() => {\n        if (file && !reset) {\n            previewImage();\n        }\n    }, [file, preview])\n\n    useEffect(() => {\n        if (!reset) {\n            setData((prev) => {\n                return {\n                    ...prev,\n                    thumbnail_image: file\n                }\n            })\n        }\n    }, [file])\n\n    // useEffect(() => {\n    //     if (uploadProgress === \"100%\") {\n    //         progressBar.current.classList.add('fade-out');\n    //         setTimeout(function () {\n    //             progressBar.current.classList.add('fade-out');\n    //         }, 500);\n    //         setTimeout(function () {\n    //             progressBar.current.remove();\n    //         }, 1200);\n    //     }\n    // }, [uploadProgress])\n\n    const getFileName = (url) => {\n        return url.split(/[#?]/)[0].split(\"/\").pop().trim();\n    };\n    const toBase64 = (file) =>\n        new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = (error) => reject(error);\n        });\n\n    useEffect(() => {\n        if (thumb) {\n            return fetch(thumb)\n                .then(async (response) => {\n                    const contentType = response.headers.get(\"content-type\");\n                    const blob = await response\n                        .blob()\n                        .catch((error) => console.log(\"blob error\", error));\n                    let fileName = getFileName(thumb);\n                    const file = new File([blob], fileName, {contentType});\n                    const image = await toBase64(file).catch((error) =>\n                        console.log(\"base64 Error\", error)\n                    );\n                    setTimeout(() => {\n                        setData((prev) => {\n                            return {\n                                ...prev,\n                                thumbnail_image: file\n                            }\n                        })\n                        setFile(file)\n                        setPreview(image);\n                    }, 500)\n                    return file;\n                })\n                .catch((error) =>\n                    console.log(\n                        `File converting delayed`\n                    )\n                );\n        }\n    }, [thumb])\n\n    return (\n        <FormGroup>\n            <Label for=\"title\">\n                Upload Thumbnail\n            </Label>\n            <div className=\"position-relative overflow-hidden\">\n                <UploadImageUI blogUpload={true} handleUploadImage={handleFileInput}/>\n                {preview &&\n                    <div className={'img_wrapper position-absolute w-100 left-0 right-0 top-0 bottom-0'}>\n                        <button className=\"remove-btn\" onClick={(e) => removePreviewAndClearImageData(e)}>\n                            <Icon icon=\"clarity:window-close-line\" width={20} height={20}/>\n                        </button>\n                        <div className={'img-preview_wrapper'}>\n                            <BlurImage image={preview} preview={preview}/>\n                        </div>\n                    </div>\n                }\n                {/*{uploadProgress > \"1%\" &&*/}\n                {/*    <div className=\"progressbar\" ref={progressBar} style={{width: uploadProgress}}>*/}\n                {/*        {`${uploadProgress}`}*/}\n                {/*    </div>*/}\n                {/*}*/}\n            </div>\n        </FormGroup>\n\n    )\n}\nexport default UploadFeaturedImage;","import {useEffect, useState} from 'react';\n\nconst BlurImage = (props) => {\n    const {preview, image, alt, bgColor = 'transparent', handleClick, homepage} = props;\n    const [currentImage, setCurrentImage] = useState(preview);\n    const [loading, setLoading] = useState(true);\n\n    const fetchImage = (src) => {\n        const loadingImage = new Image();\n        loadingImage.src = src;\n        loadingImage.onload = () => {\n            setCurrentImage(loadingImage.src);\n            setLoading(false);\n        };\n    };\n\n    useEffect(() => {\n        fetchImage(image);\n    }, []);\n\n    return (\n        <div className=\"shadow-sm drop-shadow-lg\" style={{overflow: 'hidden'}}>\n            <img\n                style={{\n                    filter: `${loading ? 'blur(10px)' : ''}`,\n                    transition: '0.4s filter linear',\n                    width: '100%',\n                    background: bgColor,\n                }}\n                src={currentImage}\n                alt={alt}\n                className={`${homepage ? 'img-fluid card-img no-cursor' : 'img-fluid card-img'}`}\n                onClick={handleClick}\n            />\n        </div>\n    );\n};\n\nexport default BlurImage;","import \"../../assets/scss/component/initialUploadobservations.scss\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\nimport {Icon} from \"@iconify/react/dist/iconify\";\n\nconst UploadImageUI = (props) => {\n    const {\n        maxLimit,\n        imageFormat,\n        multiple,\n        handleUploadImage,\n        error,\n        small,\n        handleObvAdd,\n        defaultUploadBox,\n        blogUpload\n    } = props;\n    return (\n        <div className=\"position-relative\">\n            <div\n                className={`upload-image_wrapper ${small ? \"small-upload_box mb-5\" : ''} ${blogUpload ? 'blog-upload-box' : ''}`}>\n                <div className=\"upload-ob-inner\">\n                    <FormGroup>\n                        <Label htmlFor=\"UploadFile\">\n                            <div className=\"upload-info\">\n                                <Icon icon=\"bx:image-alt\" color=\"#737e96\" width=\"42\" height=\"42\"/>\n                                <p>{defaultUploadBox ? 'Upload your first observation' : 'Drag and drop images or click to upload'}</p>\n                                {maxLimit && <span className=\"text-black\">Max. Image Size: 5MB</span>}\n                                {imageFormat &&\n                                    <ul>\n                                        <li>\n                                            Common Image File Formats (JPEG or\n                                            JPG, PNG)\n                                        </li>\n                                    </ul>\n                                }\n\n                            </div>\n                        </Label>\n                        <Input\n                            type=\"file\"\n                            name=\"file\"\n                            id=\"UploadFile\"\n                            accept=\"image/jpg, image/jpeg, image/png\"\n                            multiple={multiple}\n                            onChange={(e) => handleUploadImage(e)}\n                        />\n                    </FormGroup>\n                </div>\n                {error?.count &&\n                    <span className=\"text-danger d-block small my-1 d-inline-block\">{error?.count} </span>\n                }\n                {error?.size &&\n                    <span className=\"text-danger d-block small my-1 d-inline-block\">{error?.size}</span>\n                }\n                {error?.duplicate &&\n                    <span className=\"text-info d-block small my-1 d-inline-block\">{error?.duplicate}</span>\n                }\n            </div>\n            {defaultUploadBox &&\n                <div className={`${defaultUploadBox ? 'mark-center' : ''}`}>\n                    <button onClick={(e) => handleObvAdd(e)}\n                            className={`btn btn-secondary`}>\n                        <Icon icon=\"heroicons-outline:upload\" width=\"25\" height=\"22\"/>\n                        Upload Observation\n                    </button>\n                </div>\n            }\n        </div>\n    )\n}\nexport default UploadImageUI;"],"names":["props","setData","thumb","uploadProgress","error","update","useState","file","setFile","preview","setPreview","reset","setReset","useLayoutEffect","reader","FileReader","onloadend","base64String","result","replace","baseImage","readAsDataURL","previewImage","useEffect","prev","thumbnail_image","toBase64","Promise","resolve","reject","onload","onerror","fetch","then","response","contentType","headers","get","blob","catch","console","log","fileName","split","pop","trim","File","image","setTimeout","for","className","UploadImageUI","blogUpload","handleUploadImage","e","target","files","onClick","preventDefault","removePreviewAndClearImageData","icon","width","height","BlurImage","alt","bgColor","handleClick","homepage","currentImage","setCurrentImage","loading","setLoading","src","loadingImage","Image","fetchImage","style","overflow","filter","transition","background","maxLimit","imageFormat","multiple","small","handleObvAdd","defaultUploadBox","htmlFor","color","type","name","id","accept","onChange","count","size","duplicate"],"sourceRoot":""}