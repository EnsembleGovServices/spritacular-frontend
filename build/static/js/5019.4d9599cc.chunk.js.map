{"version":3,"file":"static/js/5019.4d9599cc.chunk.js","mappings":"mTA+IA,EAvI4B,SAACA,GACzB,IAAOC,EAAiDD,EAAjDC,QAAwCC,GAASF,EAAxCG,eAAwCH,EAAxBI,MAAwBJ,EAAjBK,OAAiBL,EAATE,OAC/C,GAAwBI,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,YAA9B,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,MA+BAC,EAAAA,EAAAA,kBAAgB,WACRN,IAASI,GAxBI,WACjB,IAAMG,EAAS,IAAIC,WACnBD,EAAOE,UAAY,WACf,IAAMC,EAAeH,EAAOI,OAAOC,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAClEC,EAAS,gCAA4BH,GAC3CP,EAAWU,IAEfN,EAAOO,cAAcd,GAkBjBe,KAEL,CAACf,EAAME,KAEVc,EAAAA,EAAAA,YAAU,WACDZ,GACDV,GAAQ,SAACuB,GACL,OAAO,kBACAA,GADP,IAEIC,gBAAiBlB,SAI9B,CAACA,IAcJ,IAGMmB,EAAW,SAACnB,GAAD,OACb,IAAIoB,SAAQ,SAACC,EAASC,GAClB,IAAMf,EAAS,IAAIC,WACnBD,EAAOO,cAAcd,GACrBO,EAAOgB,OAAS,kBAAMF,EAAQd,EAAOI,SACrCJ,EAAOiB,QAAU,SAAC3B,GAAD,OAAWyB,EAAOzB,QAoC3C,OAjCAmB,EAAAA,EAAAA,YAAU,WACN,GAAIrB,EACA,OAAO8B,MAAM9B,GACR+B,KADE,mCACG,WAAOC,GAAP,sFACIC,EAAcD,EAASE,QAAQC,IAAI,gBADvC,SAEiBH,EACdI,OACAC,OAAM,SAACnC,GAAD,OAAWoC,QAAQC,IAAI,aAAcrC,MAJ9C,cAEIkC,EAFJ,OAKEI,EAAuBxC,EAlB5ByC,MAAM,QAAQ,GAAGA,MAAM,KAAKC,MAAMC,OAmB3BtC,EAAO,IAAIuC,KAAK,CAACR,GAAOI,EAAU,CAACP,YAAAA,IANvC,SAOkBT,EAASnB,GAAMgC,OAAM,SAACnC,GAAD,OACrCoC,QAAQC,IAAI,eAAgBrC,MAR9B,cAOI2C,EAPJ,OAUFC,YAAW,WACP/C,GAAQ,SAACuB,GACL,OAAO,kBACAA,GADP,IAEIC,gBAAiBlB,OAGzBC,EAAQD,GACRG,EAAWqC,KACZ,KAnBD,kBAoBKxC,GApBL,4CADH,uDAuBFgC,OAAM,SAACnC,GAAD,OACHoC,QAAQC,IAAR,gCAKb,CAACvC,KAGA,UAAC,KAAD,YACI,SAAC,KAAD,CAAO+C,IAAI,QAAX,+BAGA,iBAAKC,UAAU,oCAAf,WACI,SAACC,EAAA,EAAD,CAAeC,YAAY,EAAMC,kBA3GrB,SAACC,GACrB1C,GAAS,GACTF,EAAW,MACXF,EAAQ8C,EAAEC,OAAOC,MAAM,OAyGd/C,IACG,iBAAKyC,UAAW,oEAAhB,WACI,mBAAQA,UAAU,aAAaO,QAAS,SAACH,GAAD,OA/FrB,SAACA,GACpC1C,GAAS,GACT0C,EAAEI,iBACFhD,EAAW,MACXF,EAAQ,MACRP,GAAQ,SAACuB,GACL,OAAO,kBACAA,GADP,IAEIC,gBAAiB,UAuFsCkC,CAA+BL,IAA9E,UACI,SAAC,KAAD,CAAMM,KAAK,4BAA4BC,MAAO,GAAIC,OAAQ,QAE9D,gBAAKZ,UAAW,sBAAhB,UACI,SAACa,EAAA,EAAD,CAAWhB,MAAOtC,EAASA,QAASA,iB,0DC3FhE,IApCkB,SAACT,GACf,IAAOS,EAAuET,EAAvES,QAASsC,EAA8D/C,EAA9D+C,MAAOiB,EAAuDhE,EAAvDgE,IAAvB,EAA8EhE,EAAlDiE,QAAAA,OAA5B,MAAsC,cAAtC,EAAqDC,EAAyBlE,EAAzBkE,YAAaC,EAAYnE,EAAZmE,SAClE,GAAwC7D,EAAAA,EAAAA,UAASG,GAAjD,eAAO2D,EAAP,KAAqBC,EAArB,KACA,GAA8B/D,EAAAA,EAAAA,WAAS,GAAvC,eAAOgE,EAAP,KAAgBC,EAAhB,KAeA,OAJAhD,EAAAA,EAAAA,YAAU,YATS,SAACiD,GAChB,IAAMC,EAAe,IAAIC,MACzBD,EAAaD,IAAMA,EACnBC,EAAa3C,OAAS,WAClBuC,EAAgBI,EAAaD,KAC7BD,GAAW,IAKfI,CAAW5B,KACZ,KAGC,gBAAKG,UAAU,2BAA2B0B,MAAO,CAACC,SAAU,UAA5D,UACI,gBACID,MAAO,CACHE,OAAO,GAAD,OAAKR,EAAU,aAAe,IACpCS,WAAY,qBACZlB,MAAO,OACPmB,WAAYf,GAEhBO,IAAKJ,EACLJ,IAAKA,EACLd,UAAS,UAAKiB,EAAW,+BAAiC,sBAC1DV,QAASS,Q,mECsCzB,IAlEsB,SAAClE,GACnB,IACIiF,EASAjF,EATAiF,SACAC,EAQAlF,EARAkF,YACAC,EAOAnF,EAPAmF,SACA9B,EAMArD,EANAqD,kBACAjD,EAKAJ,EALAI,MACAgF,EAIApF,EAJAoF,MACAC,EAGArF,EAHAqF,aACAC,EAEAtF,EAFAsF,iBACAlC,EACApD,EADAoD,WAEJ,OACI,iBAAKF,UAAU,oBAAf,WACI,iBACIA,UAAS,+BAA0BkC,EAAQ,wBAA0B,GAA5D,YAAkEhC,EAAa,kBAAoB,IADhH,WAEI,gBAAKF,UAAU,kBAAf,UACI,UAAC,KAAD,YACI,SAAC,KAAD,CAAOqC,QAAQ,aAAf,UACI,iBAAKrC,UAAU,cAAf,WACI,SAAC,KAAD,CAAMU,KAAK,eAAe4B,MAAM,UAAU3B,MAAM,KAAKC,OAAO,QAC5D,uBAAIwB,EAAmB,gCAAkC,4CACxDL,IAAY,iBAAM/B,UAAU,aAAhB,kCACZgC,IACG,yBACI,iFAShB,SAAC,KAAD,CACIO,KAAK,OACLC,KAAK,OACLC,GAAG,aACHC,OAAO,mCACPT,SAAUA,EACVU,SAAU,SAACvC,GAAD,OAAOD,EAAkBC,YAIzC,OAALlD,QAAK,IAALA,OAAA,EAAAA,EAAO0F,SACJ,kBAAM5C,UAAU,gDAAhB,iBAAiE9C,QAAjE,IAAiEA,OAAjE,EAAiEA,EAAO0F,MAAxE,QAEE,OAAL1F,QAAK,IAALA,OAAA,EAAAA,EAAO2F,QACJ,iBAAM7C,UAAU,gDAAhB,gBAAiE9C,QAAjE,IAAiEA,OAAjE,EAAiEA,EAAO2F,QAEtE,OAAL3F,QAAK,IAALA,OAAA,EAAAA,EAAO4F,aACJ,iBAAM9C,UAAU,8CAAhB,gBAA+D9C,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAO4F,eAG7EV,IACG,gBAAKpC,UAAS,UAAKoC,EAAmB,cAAgB,IAAtD,UACI,oBAAQ7B,QAAS,SAACH,GAAD,OAAO+B,EAAa/B,IAC7BJ,UAAS,oBADjB,WAEI,SAAC,KAAD,CAAMU,KAAK,2BAA2BC,MAAM,KAAKC,OAAO,OAF5D,+B","sources":["components/Blog/UploadFeaturedImage.jsx","components/Common/BlurImage.jsx","components/Shared/UploadImageUI.jsx"],"sourcesContent":["import \"../../assets/scss/component/initialUploadobservations.scss\";\r\nimport \"../../assets/scss/component/uploadFeatureBlog.scss\";\r\nimport UploadImageUI from \"../Shared/UploadImageUI\";\r\nimport {useEffect, useLayoutEffect, useState} from \"react\";\r\nimport {Icon} from '@iconify/react';\r\nimport BlurImage from \"../Common/BlurImage\";\r\nimport {FormGroup, Label} from \"reactstrap\";\r\n\r\nconst UploadFeaturedImage = (props) => {\r\n    const {setData, uploadProgress, error, update, thumb} = props;\r\n    const [file, setFile] = useState();\r\n    const [preview, setPreview] = useState();\r\n    const [reset, setReset] = useState(false);\r\n    // const progressBar = useRef(null);\r\n\r\n    const handleFileInput = (e) => {\r\n        setReset(false);\r\n        setPreview(null)\r\n        setFile(e.target.files[0]);\r\n    }\r\n    const previewImage = () => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            const base64String = reader.result.replace('data:', '').replace(/^.+,/, '');\r\n            const baseImage = `data:image/png;base64,${base64String}`;\r\n            setPreview(baseImage);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    const removePreviewAndClearImageData = (e) => {\r\n        setReset(true);\r\n        e.preventDefault();\r\n        setPreview(null);\r\n        setFile(null);\r\n        setData((prev) => {\r\n            return {\r\n                ...prev,\r\n                thumbnail_image: null\r\n            }\r\n        })\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        if (file && !reset) {\r\n            previewImage();\r\n        }\r\n    }, [file, preview])\r\n\r\n    useEffect(() => {\r\n        if (!reset) {\r\n            setData((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    thumbnail_image: file\r\n                }\r\n            })\r\n        }\r\n    }, [file])\r\n\r\n    // useEffect(() => {\r\n    //     if (uploadProgress === \"100%\") {\r\n    //         progressBar.current.classList.add('fade-out');\r\n    //         setTimeout(function () {\r\n    //             progressBar.current.classList.add('fade-out');\r\n    //         }, 500);\r\n    //         setTimeout(function () {\r\n    //             progressBar.current.remove();\r\n    //         }, 1200);\r\n    //     }\r\n    // }, [uploadProgress])\r\n\r\n    const getFileName = (url) => {\r\n        return url.split(/[#?]/)[0].split(\"/\").pop().trim();\r\n    };\r\n    const toBase64 = (file) =>\r\n        new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = (error) => reject(error);\r\n        });\r\n\r\n    useEffect(() => {\r\n        if (thumb) {\r\n            return fetch(thumb)\r\n                .then(async (response) => {\r\n                    const contentType = response.headers.get(\"content-type\");\r\n                    const blob = await response\r\n                        .blob()\r\n                        .catch((error) => console.log(\"blob error\", error));\r\n                    let fileName = getFileName(thumb);\r\n                    const file = new File([blob], fileName, {contentType});\r\n                    const image = await toBase64(file).catch((error) =>\r\n                        console.log(\"base64 Error\", error)\r\n                    );\r\n                    setTimeout(() => {\r\n                        setData((prev) => {\r\n                            return {\r\n                                ...prev,\r\n                                thumbnail_image: file\r\n                            }\r\n                        })\r\n                        setFile(file)\r\n                        setPreview(image);\r\n                    }, 500)\r\n                    return file;\r\n                })\r\n                .catch((error) =>\r\n                    console.log(\r\n                        `File converting delayed`\r\n                    )\r\n                );\r\n        }\r\n    }, [thumb])\r\n\r\n    return (\r\n        <FormGroup>\r\n            <Label for=\"title\">\r\n                Upload Thumbnail\r\n            </Label>\r\n            <div className=\"position-relative overflow-hidden\">\r\n                <UploadImageUI blogUpload={true} handleUploadImage={handleFileInput}/>\r\n                {preview &&\r\n                    <div className={'img_wrapper position-absolute w-100 left-0 right-0 top-0 bottom-0'}>\r\n                        <button className=\"remove-btn\" onClick={(e) => removePreviewAndClearImageData(e)}>\r\n                            <Icon icon=\"clarity:window-close-line\" width={20} height={20}/>\r\n                        </button>\r\n                        <div className={'img-preview_wrapper'}>\r\n                            <BlurImage image={preview} preview={preview}/>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {/*{uploadProgress > \"1%\" &&*/}\r\n                {/*    <div className=\"progressbar\" ref={progressBar} style={{width: uploadProgress}}>*/}\r\n                {/*        {`${uploadProgress}`}*/}\r\n                {/*    </div>*/}\r\n                {/*}*/}\r\n            </div>\r\n        </FormGroup>\r\n\r\n    )\r\n}\r\nexport default UploadFeaturedImage;","import {useEffect, useState} from 'react';\r\n\r\nconst BlurImage = (props) => {\r\n    const {preview, image, alt, bgColor = 'transparent', handleClick, homepage} = props;\r\n    const [currentImage, setCurrentImage] = useState(preview);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const fetchImage = (src) => {\r\n        const loadingImage = new Image();\r\n        loadingImage.src = src;\r\n        loadingImage.onload = () => {\r\n            setCurrentImage(loadingImage.src);\r\n            setLoading(false);\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchImage(image);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"shadow-sm drop-shadow-lg\" style={{overflow: 'hidden'}}>\r\n            <img\r\n                style={{\r\n                    filter: `${loading ? 'blur(10px)' : ''}`,\r\n                    transition: '0.4s filter linear',\r\n                    width: '100%',\r\n                    background: bgColor,\r\n                }}\r\n                src={currentImage}\r\n                alt={alt}\r\n                className={`${homepage ? 'img-fluid card-img no-cursor' : 'img-fluid card-img'}`}\r\n                onClick={handleClick}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlurImage;","import \"../../assets/scss/component/initialUploadobservations.scss\";\r\nimport {FormGroup, Input, Label} from \"reactstrap\";\r\nimport {Icon} from \"@iconify/react/dist/iconify\";\r\n\r\nconst UploadImageUI = (props) => {\r\n    const {\r\n        maxLimit,\r\n        imageFormat,\r\n        multiple,\r\n        handleUploadImage,\r\n        error,\r\n        small,\r\n        handleObvAdd,\r\n        defaultUploadBox,\r\n        blogUpload\r\n    } = props;\r\n    return (\r\n        <div className=\"position-relative\">\r\n            <div\r\n                className={`upload-image_wrapper ${small ? \"small-upload_box mb-5\" : ''} ${blogUpload ? 'blog-upload-box' : ''}`}>\r\n                <div className=\"upload-ob-inner\">\r\n                    <FormGroup>\r\n                        <Label htmlFor=\"UploadFile\">\r\n                            <div className=\"upload-info\">\r\n                                <Icon icon=\"bx:image-alt\" color=\"#737e96\" width=\"42\" height=\"42\"/>\r\n                                <p>{defaultUploadBox ? 'Upload your first observation' : 'Drag and drop images or click to upload'}</p>\r\n                                {maxLimit && <span className=\"text-black\">Max. Image Size: 5MB</span>}\r\n                                {imageFormat &&\r\n                                    <ul>\r\n                                        <li>\r\n                                            Common Image File Formats (JPEG or\r\n                                            JPG, PNG)\r\n                                        </li>\r\n                                    </ul>\r\n                                }\r\n\r\n                            </div>\r\n                        </Label>\r\n                        <Input\r\n                            type=\"file\"\r\n                            name=\"file\"\r\n                            id=\"UploadFile\"\r\n                            accept=\"image/jpg, image/jpeg, image/png\"\r\n                            multiple={multiple}\r\n                            onChange={(e) => handleUploadImage(e)}\r\n                        />\r\n                    </FormGroup>\r\n                </div>\r\n                {error?.count &&\r\n                    <span className=\"text-danger d-block small my-1 d-inline-block\">{error?.count} </span>\r\n                }\r\n                {error?.size &&\r\n                    <span className=\"text-danger d-block small my-1 d-inline-block\">{error?.size}</span>\r\n                }\r\n                {error?.duplicate &&\r\n                    <span className=\"text-info d-block small my-1 d-inline-block\">{error?.duplicate}</span>\r\n                }\r\n            </div>\r\n            {defaultUploadBox &&\r\n                <div className={`${defaultUploadBox ? 'mark-center' : ''}`}>\r\n                    <button onClick={(e) => handleObvAdd(e)}\r\n                            className={`btn btn-secondary`}>\r\n                        <Icon icon=\"heroicons-outline:upload\" width=\"25\" height=\"22\"/>\r\n                        Upload Observation\r\n                    </button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default UploadImageUI;"],"names":["props","setData","thumb","uploadProgress","error","update","useState","file","setFile","preview","setPreview","reset","setReset","useLayoutEffect","reader","FileReader","onloadend","base64String","result","replace","baseImage","readAsDataURL","previewImage","useEffect","prev","thumbnail_image","toBase64","Promise","resolve","reject","onload","onerror","fetch","then","response","contentType","headers","get","blob","catch","console","log","fileName","split","pop","trim","File","image","setTimeout","for","className","UploadImageUI","blogUpload","handleUploadImage","e","target","files","onClick","preventDefault","removePreviewAndClearImageData","icon","width","height","BlurImage","alt","bgColor","handleClick","homepage","currentImage","setCurrentImage","loading","setLoading","src","loadingImage","Image","fetchImage","style","overflow","filter","transition","background","maxLimit","imageFormat","multiple","small","handleObvAdd","defaultUploadBox","htmlFor","color","type","name","id","accept","onChange","count","size","duplicate"],"sourceRoot":""}