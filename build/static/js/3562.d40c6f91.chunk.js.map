{"version":3,"file":"static/js/3562.d40c6f91.chunk.js","mappings":"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","sources":["components/Shared/LoadMore.jsx","hooks/useObservations.js","hooks/useObservationsData.js","helpers/dashboard.js","pages/Dashboard/Dashboard.jsx","pages/Observation/Observations.jsx"],"sourcesContent":["import { Button} from 'reactstrap';\n\nexport const LoadMore = (props) => {\n    const {handleLoadMore} = props;\n    return (\n        <Button className='gray-outline-btn d-block mx-auto px-4 fw-normal' onClick={()=> handleLoadMore()}>Load more</Button>\n    )\n};","import {useContext, useDebugValue} from \"react\";\nimport {ObservationContext} from \"../pages/Observation/Observations\";\n\nconst useObservations = () => {\n    const { observationImages } = useContext(ObservationContext);\n    // useDebugValue(observationSteps, observationSteps => observationSteps ? 'Steps set' : \"Steps not set\")\n    useDebugValue(observationImages, observationImages => observationImages?.data ? 'Images set' : \"Images not set\")\n    return useContext(ObservationContext);\n}\n\nexport default useObservations;","import {useContext, useDebugValue} from \"react\";\nimport {observationViewContext} from \"../layouts/PersistLogin\";\n\nconst useObservationsData = () => {\n    const { observationListData } = useContext(observationViewContext);\n    useDebugValue(observationListData, observationListData => observationListData ? 'List data set' : \"Listing data not set\")\n    return useContext(observationViewContext);\n}\n\nexport default useObservationsData;","export const dashboardHelper = {\n    filterState: {\n        isCountryOpen:false,\n        isTypeOpen:false,\n        isStatusOpen:false,\n        isRateOpen:false,\n        isFOVOpen:false,\n        isLensTypeOpen:false,\n    },\n    horizontal: {\n        country: {\n            name:'',\n            code:''\n        },\n        type:'',\n        status:'',\n    },\n    vertical: {\n        from_obs_data: null,\n        to_obs_data: null,\n        obs_start_date: null,\n        obs_end_date: null,\n        obs_start_time: null,\n        obs_end_time: null,\n        camera_type: \"\",\n        fps: \"\",\n        iso: \"\",\n        fov: \"\",\n        shutter_speed: \"\",\n        lens_type: \"\",\n    },\n    nextPageUrl: '/observation/dashboard/?country=&category=&status='\n}","import \"../../assets/scss/component/dashboard.scss\";\nimport {lazy, Suspense, useEffect, useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport useAuth from \"../../hooks/useAuth\";\nimport useObservationsData from \"../../hooks/useObservationsData\";\n\nimport useObservations from \"../../hooks/useObservations\";\nimport {LoadMore} from \"../../components/Shared/LoadMore\";\n\nimport axios from \"../../api/axios\";\nimport moment from \"moment\";\nimport Images from \"../../static/images\";\nimport {dashboardHelper} from \"../../helpers/dashboard\";\nimport {baseURL} from \"../../helpers/url\";\n\nconst FilterSelectMenu = lazy(() =>\n    import(\"../../components/Shared/FilterSelectMenu\")\n);\nconst AdvancedFilter = lazy(() =>\n    import(\"../../components/Shared/AdvancedFilter\")\n);\nconst ObservationDetailPage = lazy(() =>\n    import(\"../Observation/ObservationListPage\")\n);\nconst ObservationListView = lazy(() =>\n    import(\"../Observation/ObservationListView\")\n);\nconst ObservationDetails = lazy(() =>\n    import(\"../Observation/ObservationDetails\")\n);\n\nconst Dashboard = () => {\n    const navigate = useNavigate();\n    const {auth} = useAuth();\n    const [isObservationDetailModal, setObservationDetailModal] = useState(false);\n    const [selectedObservationId, setSelectedObservationId] = useState();\n    const {setObservationData, setObservationSteps, setObservationImages} = useObservations();\n    const [filterShow, setFilterShow] = useState(true);\n    const [listView, setListView] = useState(false);\n    const [gridView, setGridView] = useState(true);\n\n    const [searchCountry, setSearchCountry] = useState(\"\");\n    const [isFilterOpen, setIsFilterOpen] = useState(dashboardHelper.filterState);\n    const [selectedFilterHorizontal, setSelectedFilterHorizontal] = useState(\n        dashboardHelper.horizontal\n    );\n    const [selectedFilterVertical, setSelectedFilterVertical] = useState(\n        dashboardHelper.vertical\n    );\n    const [isLoaded, setIsLoaded] = useState(false);\n    const {observationListData, setObservationListData} = useObservationsData();\n    const [nextPageUrl, setNextPageUrl] = useState(dashboardHelper.nextPageUrl);\n    const [filterReset, setFilterReset] = useState(false);\n\n    const getObservationData = (\n        reset = false,\n        country = `${selectedFilterHorizontal?.country?.code}`,\n        category = `${selectedFilterHorizontal?.type}`,\n        status = `${selectedFilterHorizontal?.status}`\n    ) => {\n        if (auth?.user?.is_superuser) {\n            let url;\n            if (reset === true || !nextPageUrl) {\n                url = `${baseURL.api}/observation/dashboard/?country=${country}&category=${category}&status=${status}&page=1`;\n            } else {\n                url = process.env.NODE_ENV === \"development\" ? nextPageUrl : nextPageUrl.replace('http', 'https');\n\n            }\n\n            if (selectedFilterVertical.obs_start_date !== null) {\n                if (selectedFilterVertical.obs_start_time !== null) {\n                    selectedFilterVertical.from_obs_data = moment(\n                        selectedFilterVertical.obs_start_date +\n                        \" \" +\n                        selectedFilterVertical.obs_start_time\n                    ).format(\"DD/MM/Y H:mm\");\n                } else {\n                    selectedFilterVertical.from_obs_data = moment(\n                        selectedFilterVertical.obs_start_date + \" 00:00\"\n                    ).format(\"DD/MM/Y HH:mm\");\n                }\n            }\n            if (selectedFilterVertical.obs_end_date !== null) {\n                if (selectedFilterVertical.obs_end_time !== null) {\n                    selectedFilterVertical.to_obs_data = moment(\n                        selectedFilterVertical.obs_end_date +\n                        \" \" +\n                        selectedFilterVertical.obs_end_time\n                    ).format(\"DD/MM/Y HH:mm\");\n                } else {\n                    selectedFilterVertical.to_obs_data = moment(\n                        selectedFilterVertical.obs_end_date + \" 23:59\"\n                    ).format(\"DD/MM/Y HH:mm\");\n                }\n            }\n\n            axios\n                .post(url, selectedFilterVertical, {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                        Authorization: `Bearer ${auth?.token?.access}`,\n                    },\n                })\n                .then((success) => {\n                    setFilterReset(false);\n                    if (success?.data?.results?.data !== undefined) {\n                        if (success?.data?.next) {\n                            setNextPageUrl(success?.data?.next);\n                        } else {\n                            setNextPageUrl(null);\n                        }\n                        let records = success?.data?.results?.data;\n                        let prevData;\n\n                        if (observationListData?.list?.length > 0 && reset === false) {\n                            prevData = [...observationListData?.list];\n                            prevData = [...prevData, ...records];\n                        } else {\n                            prevData = success?.data?.results?.data;\n                        }\n                        setObservationListData((prev) => {\n                            return {\n                                ...prev,\n                                list: prevData,\n                            };\n                        });\n                        setIsLoaded(true);\n                    } else {\n                        setNextPageUrl(null);\n                        setObservationListData({list: [], active: {}});\n                    }\n                    // setObservationList(success?.data?.results?.data)\n                })\n                .catch((error) => {\n                    console.log(error.response);\n                });\n        }\n    };\n\n    const handleLoadMoreData = () => {\n        getObservationData(false);\n    };\n\n    const handleObservationDetailModal = (id) => {\n        setObservationDetailModal(!isObservationDetailModal);\n        setSelectedObservationId(id);\n    };\n    const cleaningUpObservationDataForDraftSaving = async (data) => {\n        setObservationImages([]);\n        setObservationData([]);\n        await updateStateForDraft(data);\n        return true;\n    };\n    const updateStateForDraft = (data) => {\n        setObservationSteps((prev) => {\n            return {\n                ...prev,\n                total: 3,\n                active: 1,\n                mode: {\n                    update: true,\n                    ...data,\n                },\n            };\n        });\n    };\n\n    const handleObservationEdit = (data) => {\n        cleaningUpObservationDataForDraftSaving(data).then((r) => r);\n        setObservationDetailModal(false);\n        setTimeout(function () {\n            navigate(\"/observations/update\");\n        }, 100);\n    };\n    const handleFilterOpen = () => {\n        setFilterShow(!filterShow);\n    };\n    const handleListView = () => {\n        setListView(true);\n        setGridView(false);\n    };\n    const handleGridView = () => {\n        setGridView(true);\n        setListView(false);\n    };\n    const findCountry = (e) => {\n        let value = e.target.value.toLowerCase();\n        setSearchCountry(value);\n    };\n\n    const handleFilterValue = (value, type) => {\n        if (type === \"status\") {\n            value = value.toLowerCase();\n            getObservationData(\n                true,\n                selectedFilterHorizontal.country?.code,\n                selectedFilterHorizontal.type,\n                value\n            );\n        }\n\n        if (type === \"category\") {\n            getObservationData(\n                true,\n                selectedFilterHorizontal.country?.code,\n                value,\n                selectedFilterHorizontal.status\n            );\n        }\n\n        if (type === \"country\") {\n            getObservationData(\n                true,\n                value.code,\n                selectedFilterHorizontal.type,\n                selectedFilterHorizontal.status\n            );\n        }\n        if (type === \"filter\") {\n            getObservationData(\n                true,\n                selectedFilterHorizontal.country.code,\n                selectedFilterHorizontal.type,\n                selectedFilterHorizontal.status\n            );\n        }\n    };\n\n    //  Handle Filtered Input\n    const handleFilterInput = (e) => {\n        let name = e.target.name,\n            value = e.target.value;\n\n        console.log(name, value);\n        setSelectedFilterVertical({\n            ...selectedFilterVertical,\n            [name]: value,\n        });\n    };\n\n    //  Reset Filters\n    const resetFilters = () => {\n        setFilterReset(true);\n        setSelectedFilterHorizontal(dashboardHelper.horizontal);\n        setSelectedFilterVertical(dashboardHelper.vertical);\n        getObservationData(true, \"\", \"\", \"\");\n    };\n\n    useEffect(() => {\n        getObservationData(true);\n    }, [filterReset]);\n\n    useEffect(() => {\n        setObservationListData((prev) => {\n            return {\n                ...prev,\n                activeType: \"\",\n                list: []\n            }\n        })\n        getObservationData(true, \"\", \"\", \"\");\n\n        if (window.innerWidth < 768) {\n            setFilterShow(false);\n        }\n        console.clear();\n    }, []);\n\n    useEffect(() => {\n        setObservationListData((prev) => {\n            return {\n                ...prev,\n                active: observationListData?.list?.[selectedObservationId],\n            };\n        });\n    }, [isObservationDetailModal]);\n\n    return (\n        <>\n            <Suspense fallback={<div></div>}>\n                <FilterSelectMenu\n                    dashboardFilter={true}\n                    galleryFilter={true}\n                    filterShow={filterShow}\n                    handleFilterOpen={handleFilterOpen}\n                    handleListView={handleListView}\n                    handleGridView={handleGridView}\n                    listView={listView}\n                    gridView={gridView}\n                    isFilterOpen={isFilterOpen}\n                    setIsFilterOpen={setIsFilterOpen}\n                    selectedFilterHorizontal={selectedFilterHorizontal}\n                    setSelectedFilterHorizontal={setSelectedFilterHorizontal}\n                    searchCountry={searchCountry}\n                    findCountry={findCountry}\n                    handleFilterValue={handleFilterValue}\n                />\n            </Suspense>\n\n            <div className=\"observation-dashboard_content\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div className=\"set-dash-content\">\n                                {filterShow && (\n                                    <Suspense fallback={<div></div>}>\n                                        <AdvancedFilter\n                                            selectedFilterVertical={selectedFilterVertical}\n                                            setSelectedFilterVertical={setSelectedFilterVertical}\n                                            handleFilterValue={handleFilterValue}\n                                            handleFilterOpen={handleFilterOpen}\n                                            isFilterOpen={isFilterOpen}\n                                            setIsFilterOpen={setIsFilterOpen}\n                                            resetFilters={resetFilters}\n                                            handleFilterInput={handleFilterInput}\n                                        />\n                                    </Suspense>\n                                )}\n\n                                <div\n                                    className={`dashboard-card overflow-hidden ${\n                                        filterShow ? \"sm-card\" : \"maximize-dash-content\"\n                                    }`}\n                                >\n                                    {observationListData?.list?.length > 0 ? (\n                                        listView ? (\n                                            <Suspense fallback={<div></div>}>\n                                                <ObservationListView\n                                                    observationList={observationListData?.list}\n                                                    isObservationDetailModal={isObservationDetailModal}\n                                                    setObservationDetailModal={setObservationDetailModal}\n                                                    setSelectedObservationId={setSelectedObservationId}\n                                                />\n                                            </Suspense>\n                                        ) : (\n                                            <Suspense fallback={<div></div>}>\n                                                <ObservationDetailPage\n                                                    observationList={observationListData?.list}\n                                                    isObservationDetailModal={isObservationDetailModal}\n                                                    setObservationDetailModal={setObservationDetailModal}\n                                                    setSelectedObservationId={setSelectedObservationId}\n                                                />\n                                                {nextPageUrl && (\n                                                    <LoadMore handleLoadMore={handleLoadMoreData}/>\n                                                )}\n                                            </Suspense>\n                                        )\n                                    ) : (\n                                        <div className=\"data-not-found\">\n                                            <img\n                                                src={Images.NoDataFound}\n                                                alt=\"No data found\"\n                                                className=\"mb-3\"\n                                            />\n                                            <p>\n                                                <b className=\"text-secondary fw-bold\">Opps!</b> No Data\n                                                Found\n                                            </p>\n                                        </div>\n                                    )}\n\n\n                                </div>\n\n                                <Suspense fallback={<div></div>}>\n                                    <ObservationDetails\n                                        data={observationListData?.active}\n                                        modalClass=\"observation-details_modal\"\n                                        open={isObservationDetailModal}\n                                        handleClose={handleObservationDetailModal}\n                                        handleContinueEdit={handleObservationEdit}\n                                        activeType={\n                                            observationListData?.active?.is_verified\n                                                ? \"verified\"\n                                                : observationListData?.active?.is_reject\n                                                    ? \"denied\"\n                                                    : observationListData?.active?.is_submit\n                                                        ? \"unverified\"\n                                                        : \"draft\"\n                                        }\n                                        handleApproveRejectEvent={getObservationData}\n                                        refreshData={getObservationData}\n                                    />\n                                </Suspense>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Dashboard;\n","import { Outlet } from \"react-router-dom\";\nimport {createContext, useEffect, useState} from \"react\";\nimport { cameraSettingFields } from \"../../helpers/url\";\n\nexport const ObservationContext = createContext({});\n\nconst Observations = () => {\n    const [observationType, setObservationType] = useState({\n        image_type: 1\n    });\n\n    const [observationSteps, setObservationSteps] = useState({\n        total: 3,\n        active: 1,\n        mode: {\n            update: false\n        }\n    });\n    const [observationImages, setObservationImages] = useState([]);\n    const [cameraDetails, setCameraDetails] = useState(cameraSettingFields);\n    const [observationCategory, setObservationCategory] = useState([]);\n    const [observationData, setObservationData] = useState({});\n\n    useEffect(()=> {\n        let data = (observationImages?.data) ? [...observationImages?.data] : []\n        setObservationData({\n            // is_draft: observationSteps?.is_draft ? 1 : 0,\n            image_type: observationType?.image_type,\n            map_data: data,\n            elevation_angle: null,\n            video_url : ''\n        })\n    }, [observationImages?.data, observationSteps?.is_draft, observationType?.image_type])\n\n    return(\n        <ObservationContext.Provider value={\n            {\n                observationType,\n                setObservationType,\n                observationSteps,\n                setObservationSteps,\n                observationImages,\n                setObservationImages,\n                observationCategory,\n                setObservationCategory,\n                observationData,\n                setObservationData,\n                cameraDetails, \n                setCameraDetails\n            }\n        }>\n            <Outlet />\n        </ObservationContext.Provider>\n    )\n}\n\nexport default Observations;"],"names":["LoadMore","props","handleLoadMore","className","onClick","observationImages","useContext","ObservationContext","useDebugValue","data","observationListData","observationViewContext","dashboardHelper","isCountryOpen","isTypeOpen","isStatusOpen","isRateOpen","isFOVOpen","isLensTypeOpen","country","name","code","type","status","from_obs_data","to_obs_data","obs_start_date","obs_end_date","obs_start_time","obs_end_time","camera_type","fps","iso","fov","shutter_speed","lens_type","FilterSelectMenu","lazy","AdvancedFilter","ObservationDetailPage","ObservationListView","ObservationDetails","navigate","useNavigate","auth","useAuth","useState","isObservationDetailModal","setObservationDetailModal","selectedObservationId","setSelectedObservationId","useObservations","setObservationData","setObservationSteps","setObservationImages","filterShow","setFilterShow","listView","setListView","gridView","setGridView","searchCountry","setSearchCountry","isFilterOpen","setIsFilterOpen","selectedFilterHorizontal","setSelectedFilterHorizontal","selectedFilterVertical","setSelectedFilterVertical","setIsLoaded","useObservationsData","setObservationListData","nextPageUrl","setNextPageUrl","filterReset","setFilterReset","getObservationData","url","reset","category","user","is_superuser","replace","baseURL","moment","format","axios","headers","Authorization","token","access","then","success","undefined","results","next","prevData","records","list","length","prev","active","catch","error","console","log","response","cleaningUpObservationDataForDraftSaving","updateStateForDraft","total","mode","update","handleFilterOpen","handleFilterValue","value","toLowerCase","useEffect","activeType","window","innerWidth","clear","Suspense","fallback","dashboardFilter","galleryFilter","handleListView","handleGridView","findCountry","e","target","resetFilters","handleFilterInput","observationList","src","Images","alt","modalClass","open","handleClose","id","handleContinueEdit","r","setTimeout","is_verified","is_reject","is_submit","handleApproveRejectEvent","refreshData","createContext","image_type","observationType","setObservationType","observationSteps","cameraSettingFields","cameraDetails","setCameraDetails","observationCategory","setObservationCategory","observationData","map_data","elevation_angle","video_url","is_draft","Provider"],"sourceRoot":""}